
    
    
    
    [{"author":["Matthew Twomey"],"categories":null,"contents":"\u003cp\u003eThere are a lot of great ways to get started with Clojure. The community around Clojure and the love they feel for the language has driven numerous resources, books, websites, and tutorials aimed at helping newcomers get started. One easy way to take Clojure for a test-drive is \u003ca href=\"https://book.babashka.org/\" target=\"_blank\" rel=\"noopener\"\u003eBabashka\u003c/a\u003e\n.\u003c/p\u003e\n\u003ch2 id=\"approaching-clojure-for-the-first-time\"\u003eApproaching Clojure for the first time\u003c/h2\u003e\n\u003cp\u003eEveryone learns differently. My first experience with Clojure was following a tutorial that used \u003ca href=\"https://leiningen.org/\" target=\"_blank\" rel=\"noopener\"\u003eLeiningen\u003c/a\u003e\n to produce a \u0026ldquo;hello world!\u0026rdquo; project. I had this up and running within seconds (not counting installing a few prerequisites). The experience was smooth, easy, and fast largely due to all the power and refinement Leiningen brings to the table.\u003c/p\u003e\n\u003cp\u003eWith this project, I was able to begin editing that single source \u003ccode\u003e.clj\u003c/code\u003e file, tweaking it and trying out a few things then relaunching the program each time to see the results (this was before I had any concept of the REPL).\u003c/p\u003e\n\u003cp\u003eA lot of other things were put in place by Leiningen when the project was created. It produced a \u003ccode\u003eproject.clj\u003c/code\u003e file which made little sense to my new eyes, along with a decent starting directory structure for the project including a test directory, a resource directory, doc directory, license file, \u0026hellip;etc. At this point in time, I didn\u0026rsquo;t understand exactly how these pieces all fit together. I\u0026rsquo;m certainly familiar with this sort of structure and scaffolding from other languages and frameworks, but I still had a lot of questions. After a bit of time, I unraveled each piece of what Leiningen had done and gained understanding of why. Overall this was a good experience, but at the time I think I was hoping for something even simpler.\u003c/p\u003e\n\u003ch2 id=\"babashka-as-a-your-hello-world-experience\"\u003eBabashka as a your \u0026ldquo;hello world!\u0026rdquo; experience\u003c/h2\u003e\n\u003cp\u003ePer the website, Babashka is a scripting environment made with Clojure, compiled to native with GraalVM. It starts up super quick and can serve as a your Clojure environment. It\u0026rsquo;s especially adept at testing things out as well as writing scripts or smaller programs. For a more in depth explanation of how it works and a deeper understanding of \u003cem\u003ewhat it is\u003c/em\u003e, see the \u003ca href=\"https://book.babashka.org/\" target=\"_blank\" rel=\"noopener\"\u003eBabashka Book\u003c/a\u003e\n.\u003c/p\u003e\n\u003cp\u003eIf you have brew installed as package manager you can install Babashka with a single command:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ebrew install borkdude/brew/babashka\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eOnce installed you can open your favorite editor and write your first script. Babashka has a ton of libraries \u0026ldquo;baked in\u0026rdquo;, so to get started you won\u0026rsquo;t need anything more than your single script file.\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"/ox-hugo/quick-babashka.gif\" width=\"600\"/\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eThe demo above shows me installing Babashla, creating a small script to get the weather from an online service, and then running that script.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eget-weather.bb\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight code-label-above\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-clojure\" data-lang=\"clojure\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ff79c6\"\u003e#\u003c/span\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003e!/usr/bin/env\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003ebb\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#50fa7b\"\u003erequire\u003c/span\u003e \u003cspan style=\"color:#ff79c6\"\u003e\u0026#39;\u003c/span\u003e[\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003echeshire.core\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e:as\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003ejson\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#ff79c6\"\u003edef \u003c/span\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elatitude\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;52.52\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#ff79c6\"\u003edef \u003c/span\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elongitude\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;13.41\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#ff79c6\"\u003elet \u003c/span\u003e[\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003eurl\u003c/span\u003e (\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003estr \u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;https://api.open-meteo.com/v1/forecast?latitude=\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elatitude\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;\u0026amp;longitude=\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003elongitude\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;\u0026amp;current_weather=true\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edata\u003c/span\u003e (\u003cspan style=\"color:#50fa7b\"\u003ejson/parse-string\u003c/span\u003e (\u003cspan style=\"color:#f1fa8c\"\u003e:body\u003c/span\u003e (\u003cspan style=\"color:#50fa7b\"\u003ecurl/get\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003eurl\u003c/span\u003e)))]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  (\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edoseq \u003c/span\u003e[[\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003ekey \u003c/span\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003evalue\u003c/span\u003e] (\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003eget \u003c/span\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edata\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;current_weather\u0026#34;\u003c/span\u003e)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    (\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003eprintln \u003c/span\u003e(\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003estr key \u003c/span\u003e\u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;: \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003evalue\u003c/span\u003e))))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eClojure is a great language with an excellent community around it and you have lots of options if you want to take it for a quick spin. Running your first few lines of Clojure with Babashka is one great way to get started.\u003c/p\u003e\n","date":"2023-10-08T11:06:00-05:00","permalink":"https://notes.beakstar.com/posts/babashka-is-a-great-clojure-entry-point/","summary":"There are a lot of great ways to get started with Clojure. The community around Clojure and the love they feel for the language has driven numerous resources, books, websites, and tutorials aimed at helping newcomers get started. One easy way to take Clojure for a test-drive is Babashka .\nApproaching Clojure for the first time Everyone learns differently. My first experience with Clojure was following a tutorial that used Leiningen to produce a \u0026ldquo;hello world!","tags":["clojure","babashka"],"title":"Babashka is a great Clojure entry point"},{"author":["Matthew Twomey"],"categories":null,"contents":"\u003cp\u003eModern tools can make building a website or blog quite easy and painless, especially if you\u0026rsquo;re willing to accept the out-of-the-box templates and setup. However, when you start wanting things \u0026ldquo;just so,\u0026rdquo; the process becomes a little more complicated.\u003c/p\u003e\n\u003ch2 id=\"technologies-in-play\"\u003eTechnologies in Play\u003c/h2\u003e\n\u003cp\u003eFor the live site, we have:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGithub Pages\u003c/li\u003e\n\u003cli\u003eGiscus\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThat\u0026rsquo;s it. It\u0026rsquo;s a static site published to a Github repository with Github Pages enabled. The post comments are powered by \u003ca href=\"https://giscus.app/\" target=\"_blank\" rel=\"noopener\"\u003eGiscus\u003c/a\u003e\n, an application that integrates with Github Discussions on the repository. These comments are essentially messages within the repository\u0026rsquo;s discussion section.\u003c/p\u003e\n\u003cp\u003eHow we obtain the static pages that are published:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEmacs org-mode\u003c/li\u003e\n\u003cli\u003eox-hugo\u003c/li\u003e\n\u003cli\u003eHugo\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI create and edit the site content using \u003ca href=\"https://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"noopener\"\u003eEmacs\u003c/a\u003e\n \u003ca href=\"https://orgmode.org/\" target=\"_blank\" rel=\"noopener\"\u003eorg-mode\u003c/a\u003e\n. While this might not be the most common approach, it\u0026rsquo;s common enough to have a range of excellent supporting tools. Ultimately, the goal in editing is to convert the content into markdown (.md) files for \u003ca href=\"https://gohugo.io/\" target=\"_blank\" rel=\"noopener\"\u003eHugo\u003c/a\u003e\n. Hugo processes these files and generates the static content for the site. \u003ca href=\"https://ox-hugo.scripter.co/\" target=\"_blank\" rel=\"noopener\"\u003eOx-hugo\u003c/a\u003e\n serves as an org-mode \u0026ldquo;exporter backend\u0026rdquo; specifically designed for seamlessly transferring org-mode content to Hugo for site generation, which is precisely what I\u0026rsquo;m doing here.\u003c/p\u003e\n\u003ch2 id=\"where-things-got-a-little-tricky\"\u003eWhere things got a little tricky\u003c/h2\u003e\n\u003ch3 id=\"the-hugo-theme\"\u003eThe Hugo Theme\u003c/h3\u003e\n\u003cp\u003eHugo is designed to work with themes and is intended to facilitate the creation, sharing, and distribution of themes. There are many good free and paid themes available to choose from. I tried several different themes and finally settled on the \u003ca href=\"https://github.com/apvarun/blist-hugo-theme\" target=\"_blank\" rel=\"noopener\"\u003eblist\u003c/a\u003e\n theme. It had a clean look that appealed to me and appeared to be quite easy to customize. Additionally, it includes a full \u0026ldquo;demo site\u0026rdquo; you can launch right from the theme itself (see the README).\u003c/p\u003e\n\u003cp\u003eThis demo site turned out to be crucial for me, as I was new to Hugo. Hugo looks to a main configuration file where you define options for Hugo as well as custom options to be interpreted by the theme you are using. Each theme does this differently, making it challenging to understand what can be customized and which variables to set for tweaks. This demo site includes a well-structured Hugo config file with all the main customizations for the theme. Studying it a bit teaches you how to create your own customized site.\u003c/p\u003e\n\u003cp\u003eThat being said, even with all that customizability, it turned out that there were still things I wanted to change and tweak that weren\u0026rsquo;t supported by the theme. This meant that I had to actually learn Hugo and how its templating engine worked, which took some time. Armed with this knowledge, I was able to start adding new variables to the theme itself and setting their corresponding values in the Hugo config. Figuring out how to create new \u0026ldquo;hooks\u0026rdquo; in the theme for Hugo and working with how the theme used Sass-compiled CSS took a late night of digging. It was fun to learn and worth the effort, but I just hadn\u0026rsquo;t anticipated this.\u003c/p\u003e\n\u003cp\u003eOnce I was up to speed on all this, I was able to achieve the desired look.\u003c/p\u003e\n\u003ch3 id=\"getting-github-pages-established-correctly\"\u003eGetting Github Pages Established Correctly\u003c/h3\u003e\n\u003cp\u003eThis wasn\u0026rsquo;t particularly hard, but it wasn\u0026rsquo;t immediately obvious where things should be and how to get started. The documentation for Github Pages is good, but there is a lot of information out there, and the first time through, I found it a bit tricky to know where to start. See \u003ca href=\"/posts/where-are-my-github-pages/\"\u003eWhere are my Github Pages?\u003c/a\u003e\n.\u003c/p\u003e\n\u003cp\u003eI had a couple of restarts during this process. I deleted and re-created the repository with a different name (twice), changed the DNS name, and moved the site from residing under a \u0026ldquo;prefix\u0026rdquo; in the URL to residing at the \u0026ldquo;root\u0026rdquo; of a custom domain, among other things. It was only after I initially got the site up that I started thinking about longevity, search-friendly URLs, SEO, etc. I would have saved some time if I had thought this through beforehand.\u003c/p\u003e\n\u003ch3 id=\"the-giscus-comment-system-theme\"\u003eThe Giscus Comment System Theme\u003c/h3\u003e\n\u003cp\u003eThis is a great comment system that\u0026rsquo;s free to use and piggybacks on Github\u0026rsquo;s \u003cem\u003ediscussion\u003c/em\u003e feature. It is also themable, but you might not be able to match it to your layout and color scheme exactly using only the provided customization options. Ultimately, I had to create my own theme file to get it to integrate properly with the rest of my site.\u003c/p\u003e\n\u003ch2 id=\"perfecting-the-org-mode-fully-published-workflow\"\u003ePerfecting the Org-mode -\u0026gt; \u0026ldquo;fully published\u0026rdquo; Workflow\u003c/h2\u003e\n\u003cp\u003eOnce all the above items were working, I turned my attention to getting text written in org-mode onto the site as quickly as possible. Ox-hugo really does take care of the bulk of the work for me here, but there were still a couple of things to be done.\u003c/p\u003e\n\u003ch3 id=\"reducing-image-sizes\"\u003eReducing image sizes\u003c/h3\u003e\n\u003cp\u003eWhen taking notes or writing in org-mode, I tend to use screenshots when I need an image. It\u0026rsquo;s very quick on a mac to grab an area of the screen onto your clipboard (\u003ccode\u003eCMD-CTRL-SHIFT-4\u003c/code\u003e) and then paste it right into your org-mode document (with \u003ca href=\"https://melpa.org/#/org-download\" target=\"_blank\" rel=\"noopener\"\u003eorg-download\u003c/a\u003e\n installed). This relies on \u003ccode\u003epngpaste\u003c/code\u003e \u003ca href=\"https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/\" target=\"_blank\" rel=\"noopener\"\u003ebehind the scenes\u003c/a\u003e\n. The issue is that PNGs can be pretty big and I want smaller image file sizes for a static website.\u003c/p\u003e\n\u003cp\u003eTo make this seamless, I wrote a script that converts all the PNGs in the image directory into WebP format. I then created \u003cem\u003eafter advice\u003c/em\u003e on the org-mode export function to automatically run this script each time I export.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-emacs-lisp\" data-lang=\"emacs-lisp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003edefun\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003econvert-notes-images\u003c/span\u003e (\u003cspan style=\"color:#ff79c6\"\u003e\u0026amp;rest\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003e_\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  (\u003cspan style=\"color:#50fa7b\"\u003emessage\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;Calling convert-images.bb (this is :after advice on org-hugo-export-to-md)\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  (\u003cspan style=\"color:#50fa7b\"\u003ecall-process\u003c/span\u003e \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;~/org-mode/notes/scripts/convert-images.bb\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003eadvice-add\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003e#\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003eorg-hugo-export-to-md\u003c/span\u003e \u003cspan style=\"color:#8be9fd;font-style:italic\"\u003e:after\u003c/span\u003e \u003cspan style=\"color:#50fa7b\"\u003e#\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#8be9fd;font-style:italic\"\u003econvert-notes-images\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI\u0026rsquo;m not actually resizing the images pixel-wise, but this typically results in a 10x + reduction in file size, which is plenty.\u003c/p\u003e\n\u003ch3 id=\"making-sure-the-site-works-the-same-locally--hugo-serve--and-in-production\"\u003eMaking sure the site works the same locally (\u003ccode\u003ehugo serve\u003c/code\u003e) and in production\u003c/h3\u003e\n\u003cp\u003eSpecial care had to be taken with a few things to make sure I could use Hugo\u0026rsquo;s built in \u0026ldquo;local server\u0026rdquo; to view the site and then also publish it to Github Pages. This will vary depending on your setup, but in my case:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003ebaseurl\u003c/code\u003e in Hugo\u0026rsquo;s toml config file \u003cem\u003ehad to\u003c/em\u003e end with a trailing slash (this relates to my custom Giscus theme)\u003c/li\u003e\n\u003cli\u003eCross-origin headers had to be setup for the local Hugo server (again related to how Giscus works)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!--listend--\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[server]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[server.headers]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    for = \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#39;/**\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [server.headers.values]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Access-Control-Allow-Origin = \u003cspan style=\"color:#f1fa8c\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"creating-a-yasnippet-for-new-articles\"\u003eCreating a yasnippet for new articles\u003c/h3\u003e\n\u003cp\u003eTo make the process of adding a new article as fast as possible, I created a \u003ca href=\"https://github.com/joaotavora/yasnippet\" target=\"_blank\" rel=\"noopener\"\u003eyassnippet\u003c/a\u003e\n to setup new org files destined to be articles:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-snippet\" data-lang=\"snippet\"\u003e# key: %org-hugo-blog\n# name: org-hugo-blog\n# --\n#+TITLE: ${1:title}\n#+AUTHOR: Matthew Twomey\n#+DATE: \u0026lt;`(format-time-string \u0026#34;%Y-%m-%d %a %H:%M\u0026#34;)`\u0026gt;\n:properties:\n#+HUGO_TAGS: vim emacs tooling\n#+HUGO_CUSTOM_FRONT_MATTER: :thumbnail /ox-hugo/20231001-161017_screenshot.png\n#+HUGO_CUSTOM_FRONT_MATTER: :toc false\n:end:\n\n$0\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUsing this I can start a new article with just a couple of key-strokes.\u003c/p\u003e\n\u003ch3 id=\"making-it-easy-to-publish-and-tracking-my-changes\"\u003eMaking it easy to publish and tracking my changes\u003c/h3\u003e\n\u003cp\u003eThe final step was to make sure I could publish to Github Pages quickly and easily. I wrote a script to take care of this. It does a little bit of pre-publication cleanup, runs the Hugo site generation, commits the changes, then pushes to Github. From there, a Github Action takes things the rest of the way and any changes, additions, or updates are live in a minute or two.\u003c/p\u003e\n\u003cp\u003eI track changes to the \u003cem\u003esource files\u003c/em\u003e for the site with git. In the end, there are three different git repos involved:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eMy content source (consisting of org-mode files, markdown files generated by ox-hugo, images, assets, ..etc)\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003epublic\u003c/code\u003e directory, which is the target directory where Hugo builds the static site (this is what gets pushed to the Github Pages repo)\u003c/li\u003e\n\u003cli\u003eThe theme (the theme I\u0026rsquo;m using is cloned from git, with my modifications in a different branch so I can pull and merge any updates from the author)\u003c/li\u003e\n\u003c/ol\u003e\n","date":"2023-10-06T23:55:00-05:00","permalink":"https://notes.beakstar.com/posts/how-this-site-was-built/","summary":"Modern tools can make building a website or blog quite easy and painless, especially if you\u0026rsquo;re willing to accept the out-of-the-box templates and setup. However, when you start wanting things \u0026ldquo;just so,\u0026rdquo; the process becomes a little more complicated.\nTechnologies in Play For the live site, we have:\nGithub Pages Giscus That\u0026rsquo;s it. It\u0026rsquo;s a static site published to a Github repository with Github Pages enabled. The post comments are powered by Giscus , an application that integrates with Github Discussions on the repository.","tags":["emacs","org-mode","giscus","hugo","ox-hugo"],"title":"How this site was built"},{"author":["Matthew Twomey"],"categories":null,"contents":"\u003cp\u003eThis site runs on GitHub Pages, and while it\u0026rsquo;s a great feature, it was initially a bit confusing to understand where everything should be.\u003c/p\u003e\n\u003cp\u003eThere are three main types of GitHub Pages:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGitHub Pages for a GitHub user\u003c/li\u003e\n\u003cli\u003eGitHub Pages for a GitHub organization\u003c/li\u003e\n\u003cli\u003eGitHub Pages for a specific repo\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"github-pages-for-a-github-user-or-organization\"\u003eGitHub Pages for a GitHub User or Organization\u003c/h2\u003e\n\u003cp\u003eConsider this the primary \u0026ldquo;site\u0026rdquo; for an account. GitHub Pages for an account (or organization) is a general site not tied to a specific repository. However, it resides in a repository with a special name: \u003ccode\u003e[username].github.io\u003c/code\u003e or \u003ccode\u003e[organization].github.io\u003c/code\u003e. If this repository doesn\u0026rsquo;t exist, create it.\u003c/p\u003e\n\u003cp\u003eOnce you have this repository, you can enable and configure Pages under the repo\u0026rsquo;s Settings -\u0026gt; Pages. You can find more details on this process \u003ca href=\"https://docs.github.com/pages\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e\n.\u003c/p\u003e\n\u003cp\u003eNotes on this:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou can have only one of these per account or per organization.\u003c/li\u003e\n\u003cli\u003eThis is what you want if you want to associate a top-level domain with the site and all your other repositories that use GitHub Pages.\u003c/li\u003e\n\u003cli\u003eOnce set up, any commits to this repo will trigger a redeployment.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"github-pages-for-a-specific-repo\"\u003eGitHub Pages for a Specific Repo\u003c/h2\u003e\n\u003cp\u003eThis is a set of GitHub Pages specific to a single repository. Any repository can be configured to have its own GitHub Pages, and the content will be accessible at \u003ccode\u003ehttps://[domain]/[repo-name]\u003c/code\u003e. Setting this up is essentially the same as setting up GitHub Pages for a \u0026ldquo;user\u0026rdquo; or \u0026ldquo;organization\u0026rdquo; site.\u003c/p\u003e\n\u003cp\u003eNotes on this:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou can have as many of these as you have repositories.\u003c/li\u003e\n\u003cli\u003eIf you have a \u0026ldquo;user\u0026rdquo; or \u0026ldquo;organization\u0026rdquo; site set up with a custom domain, this site will appear under the same domain name (e.g., \u003ccode\u003ehttps://www.bar.com/[repo-name]\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIf you have a \u0026ldquo;user\u0026rdquo; or \u0026ldquo;organization\u0026rdquo; site set up without a custom domain, this site will appear under \u003ccode\u003ehttps://[username].github.io/[repo-name]\u003c/code\u003e or \u003ccode\u003ehttps://[organization].github.io/[repo-name]\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIf you set up a unique custom domain for this site, the site will be available directly under that name (at the \u0026ldquo;root,\u0026rdquo; e.g., \u003ccode\u003ehttp://foo.bar.com/\u003c/code\u003e without the \u003ccode\u003e/[repo-name]\u003c/code\u003e after the hostname).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"notes-on-custom-domain-names\"\u003eNotes on Custom Domain Names\u003c/h2\u003e\n\u003ch3 id=\"setting-up-content-to-appear-when-a-user-navigates-to-https-foo-dot-bar-dot-com\"\u003eSetting up content to appear when a user navigates to \u003ccode\u003ehttps://foo.bar.com\u003c/code\u003e\u003c/h3\u003e\n\u003ch4 id=\"option-1-using-a-regular-repository\"\u003eOption 1 - Using a \u0026ldquo;regular\u0026rdquo; repository\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a repository with any available name.\u003c/li\u003e\n\u003cli\u003eCreate a \u003ccode\u003eCNAME\u003c/code\u003e DNS record pointing \u003ccode\u003efoo.bar.com\u003c/code\u003e -\u0026gt; \u003ccode\u003e[user/organization].github.io\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eEnable GitHub Pages in this repository (Settings -\u0026gt; Pages).\u003c/li\u003e\n\u003cli\u003eSet the custom domain in the settings.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere will be some DNS validation that occurs automatically before the site goes live.\u003c/p\u003e\n\u003ch4 id=\"option-2-using-a-user-or-organization-repository\"\u003eOption 2 - Using a user or organization repository\u003c/h4\u003e\n\u003cp\u003eOption 2 is almost identical to Option 1, but it involves creating a repository with the name \u003ccode\u003e[username].github.io\u003c/code\u003e or \u003ccode\u003e[organization].github.io\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a user or organization repository named \u003ccode\u003e[user/organization].github.io\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eCreate a \u003ccode\u003eCNAME\u003c/code\u003e DNS record pointing \u003ccode\u003efoo.bar.com\u003c/code\u003e -\u0026gt; \u003ccode\u003e[user/organization].github.io\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eEnable GitHub Pages in this repository (Settings -\u0026gt; Pages).\u003c/li\u003e\n\u003cli\u003eSet the custom domain in the settings.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere will be some DNS validation that occurs automatically before the site goes live.\u003c/p\u003e\n\u003ch3 id=\"what-is-the-difference\"\u003eWhat is the difference?\u003c/h3\u003e\n\u003cp\u003eIn both cases, you\u0026rsquo;re pointing a \u003ccode\u003eCNAME\u003c/code\u003e to \u003ccode\u003e[user/organization].github.io\u003c/code\u003e and then associating your custom DNS name in the repository settings. The difference is that when you use the specially named \u003ccode\u003e[user/organization].github.io\u003c/code\u003e repository, it also serves as a potential parent to any of your other GitHub Pages that may be present in your other repositories.\u003c/p\u003e\n\u003ch3 id=\"so-which-should-i-use\"\u003eSo which should I use?\u003c/h3\u003e\n\u003cp\u003eIn summary, use Option 1 if you want a standalone site with a custom DNS name and nothing more.\u003c/p\u003e\n","date":"2023-10-02T10:57:00-05:00","permalink":"https://notes.beakstar.com/posts/where-are-my-github-pages/","summary":"This site runs on GitHub Pages, and while it\u0026rsquo;s a great feature, it was initially a bit confusing to understand where everything should be.\nThere are three main types of GitHub Pages:\nGitHub Pages for a GitHub user GitHub Pages for a GitHub organization GitHub Pages for a specific repo GitHub Pages for a GitHub User or Organization Consider this the primary \u0026ldquo;site\u0026rdquo; for an account. GitHub Pages for an account (or organization) is a general site not tied to a specific repository.","tags":["github","github pages"],"title":"Where Are My GitHub Pages?"},{"author":["Matthew Twomey"],"categories":null,"contents":"\u003cp\u003eI recently heard someone else share their perspective that one should not customize their tools. I also fell into this camp, until pretty recently.\u003c/p\u003e\n\u003ch2 id=\"the-lesson-of-vi\"\u003eThe lesson of vi\u003c/h2\u003e\n\u003cp\u003eI made what I believed was a wise choice back in the 90s when I was first getting comfortable in unix (AIX at the time). I decided to eschew other options and learn and stick with vi, at least for editing system configuration files. My reasoning was that vi was always present on any system I might connect to.\u003c/p\u003e\n\u003cp\u003eAs I grew in my career, this choice served me well. AIX, Solaris, BSD, Linux - any remote system I would connect to, vi was there.\u003c/p\u003e\n\u003cp\u003eI also broadened this concept into a more general sense of \u0026ldquo;using the standard\u0026rdquo; and along with that idea, I discarded any notion of ever customizing anything at all, ever. What if I needed to work on a system that didn\u0026rsquo;t have my customizations? What if I have to use a different computer? What if someone is trying to explain something to me and I\u0026rsquo;m not fully understanding because I\u0026rsquo;ve forgotten what \u0026ldquo;the defaults\u0026rdquo; are like? After two decades, I can now say that this was a mistake.\u003c/p\u003e\n\u003cp\u003eThere are benefits to this approach, but I now believe they are far outweighed by wasted productivity.\u003c/p\u003e\n\u003ch2 id=\"the-lesson-of-emacs\"\u003eThe lesson of EMACS\u003c/h2\u003e\n\u003cp\u003eA few years back I decided to learn Clojure and as a precursor, EMACS. I decided to use Doom EMACS - which comes by default with vi key bindings. My left pinky became \u003cem\u003every\u003c/em\u003e sore. The difference now was that rather than editing a few configuration files here and there, I starting spending most of my day in EMACS. As heavy users of vi know, you need to hit \u003ccode\u003eescape\u003c/code\u003e \u003cem\u003ea lot\u003c/em\u003e. As EMACS users know, you need to use \u003ccode\u003eCTRL\u003c/code\u003e \u003cem\u003ea lot\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eThere is an ingenious solution to this which lies in the basically unused \u003ccode\u003eCAPS-LOCK\u003c/code\u003e key, just to the left of \u003ccode\u003eA\u003c/code\u003e on most keyboards. The solution is to use a key-mapping tool to get dual-function from that key:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTap the key (press and release it) and you get \u003ccode\u003eescape\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eHold the key down in combination with another key and you get \u003ccode\u003eCTRL-[key]\u003c/code\u003e (\u003ccode\u003eCTRL-G\u003c/code\u003e as an example)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo that practically useless key now serves as both a control key \u003cem\u003eand\u003c/em\u003e an escape key, plus it\u0026rsquo;s in a convenient location that puts zero stress on an average pinky!\u003c/p\u003e\n\u003cp\u003eWhat\u0026rsquo;s the problem then? The idea violated my entrenched commitment to never customizing \u003cem\u003eanything\u003c/em\u003e. WHAT IF I HAD TO USE A KEYBOARD WHERE CAPS-LOCK WASN\u0026rsquo;T MAPPED THIS WAY????\u003c/p\u003e\n\u003cp\u003eGiven the severity of the pain in my left pinky, after much soul-searching I decided to try this. I love it. What\u0026rsquo;s more, becoming comfortable with this customization ultimately led me to customize many other things that have been bothering me for years.\u003c/p\u003e\n\u003ch2 id=\"so-go-ahead-customize-your-tools\"\u003eSo go ahead, customize your tools\u003c/h2\u003e\n\u003cp\u003eAs it turns out, a little tweaking here and there to better match my tools to my tasks and workflow has been a big boon to my productivity and even my well-being. It\u0026rsquo;s been about three years now and I\u0026rsquo;ve had times where I\u0026rsquo;ve sat down at other peoples\u0026rsquo; computers, used tools that aren\u0026rsquo;t configured exactly the same as mine, and even used keyboards that haven\u0026rsquo;t remapped their \u003ccode\u003eCAPS-LOCK\u003c/code\u003e key (*​gasp​*). No one died and nothing blew up. I may have had a brief period of adjustment, but it was fine. In the end, the daily gains and joy I get from having tools that act exactly as I\u0026rsquo;d like them to has far outweighed the rare occasions where I need to use a different setup.\u003c/p\u003e\n\u003cp\u003eSo go for it, customize your tools - I wish I had long ago.\u003c/p\u003e\n","date":"2023-10-01T22:42:00-05:00","permalink":"https://notes.beakstar.com/posts/tailor-your-tools/","summary":"I recently heard someone else share their perspective that one should not customize their tools. I also fell into this camp, until pretty recently.\nThe lesson of vi I made what I believed was a wise choice back in the 90s when I was first getting comfortable in unix (AIX at the time). I decided to eschew other options and learn and stick with vi, at least for editing system configuration files.","tags":["vim","emacs","tooling"],"title":"Go head, tailor your tools"}]