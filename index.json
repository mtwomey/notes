
    
    [{"author":["Matthew Twomey"],"categories":null,"contents":"\u003cp\u003eThis site runs on GitHub Pages, and while it\u0026rsquo;s a great feature, it was initially a bit confusing to understand where everything should be.\u003c/p\u003e\n\u003cp\u003eThere are three main types of GitHub Pages:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGitHub Pages for a GitHub user\u003c/li\u003e\n\u003cli\u003eGitHub Pages for a GitHub organization\u003c/li\u003e\n\u003cli\u003eGitHub Pages for a specific repo\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"github-pages-for-a-github-user-or-organization\"\u003eGitHub Pages for a GitHub User or Organization\u003c/h2\u003e\n\u003cp\u003eConsider this the primary \u0026ldquo;site\u0026rdquo; for an account. GitHub Pages for an account (or organization) is a general site not tied to a specific repository. However, it resides in a repository with a special name: \u003ccode\u003e[username].github.io\u003c/code\u003e or \u003ccode\u003e[organization].github.io\u003c/code\u003e. If this repository doesn\u0026rsquo;t exist, create it.\u003c/p\u003e\n\u003cp\u003eOnce you have this repository, you can enable and configure Pages under the repo\u0026rsquo;s Settings -\u0026gt; Pages. You can find more details on this process \u003ca href=\"https://docs.github.com/pages\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e\n.\u003c/p\u003e\n\u003cp\u003eNotes on this:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou can have only one of these per account or per organization.\u003c/li\u003e\n\u003cli\u003eThis is what you want if you want to associate a top-level domain with the site and all your other repositories that use GitHub Pages.\u003c/li\u003e\n\u003cli\u003eOnce set up, any commits to this repo will trigger a redeployment.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"github-pages-for-a-specific-repo\"\u003eGitHub Pages for a Specific Repo\u003c/h2\u003e\n\u003cp\u003eThis is a set of GitHub Pages specific to a single repository. Any repository can be configured to have its own GitHub Pages, and the content will be accessible at \u003ccode\u003ehttps://[domain]/[repo-name]\u003c/code\u003e. Setting this up is essentially the same as setting up GitHub Pages for a \u0026ldquo;user\u0026rdquo; or \u0026ldquo;organization\u0026rdquo; site.\u003c/p\u003e\n\u003cp\u003eNotes on this:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou can have as many of these as you have repositories.\u003c/li\u003e\n\u003cli\u003eIf you have a \u0026ldquo;user\u0026rdquo; or \u0026ldquo;organization\u0026rdquo; site set up with a custom domain, this site will appear under the same domain name (e.g., \u003ccode\u003ehttps://www.bar.com/[repo-name]\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIf you have a \u0026ldquo;user\u0026rdquo; or \u0026ldquo;organization\u0026rdquo; site set up without a custom domain, this site will appear under \u003ccode\u003ehttps://[username].github.io/[repo-name]\u003c/code\u003e or \u003ccode\u003ehttps://[organization].github.io/[repo-name]\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIf you set up a unique custom domain for this site, the site will be available directly under that name (at the \u0026ldquo;root,\u0026rdquo; e.g., \u003ccode\u003ehttp://foo.bar.com/\u003c/code\u003e without the \u003ccode\u003e/[repo-name]\u003c/code\u003e after the hostname).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"notes-on-custom-domain-names\"\u003eNotes on Custom Domain Names\u003c/h2\u003e\n\u003ch3 id=\"setting-up-content-to-appear-when-a-user-navigates-to-https-foo-dot-bar-dot-com\"\u003eSetting up content to appear when a user navigates to \u003ccode\u003ehttps://foo.bar.com\u003c/code\u003e\u003c/h3\u003e\n\u003ch4 id=\"option-1-using-a-regular-repository\"\u003eOption 1 - Using a \u0026ldquo;regular\u0026rdquo; repository\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a repository with any available name.\u003c/li\u003e\n\u003cli\u003eCreate a \u003ccode\u003eCNAME\u003c/code\u003e DNS record pointing \u003ccode\u003efoo.bar.com\u003c/code\u003e -\u0026gt; \u003ccode\u003e[user/organization].github.io\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eEnable GitHub Pages in this repository (Settings -\u0026gt; Pages).\u003c/li\u003e\n\u003cli\u003eSet the custom domain in the settings.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere will be some DNS validation that occurs automatically before the site goes live.\u003c/p\u003e\n\u003ch4 id=\"option-2-using-a-user-or-organization-repository\"\u003eOption 2 - Using a user or organization repository\u003c/h4\u003e\n\u003cp\u003eOption 2 is almost identical to Option 1, but it involves creating a repository with the name \u003ccode\u003e[username].github.io\u003c/code\u003e or \u003ccode\u003e[organization].github.io\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a user or organization repository named \u003ccode\u003e[user/organization].github.io\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eCreate a \u003ccode\u003eCNAME\u003c/code\u003e DNS record pointing \u003ccode\u003efoo.bar.com\u003c/code\u003e -\u0026gt; \u003ccode\u003e[user/organization].github.io\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eEnable GitHub Pages in this repository (Settings -\u0026gt; Pages).\u003c/li\u003e\n\u003cli\u003eSet the custom domain in the settings.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere will be some DNS validation that occurs automatically before the site goes live.\u003c/p\u003e\n\u003ch3 id=\"what-is-the-difference\"\u003eWhat is the difference?\u003c/h3\u003e\n\u003cp\u003eIn both cases, you\u0026rsquo;re pointing a \u003ccode\u003eCNAME\u003c/code\u003e to \u003ccode\u003e[user/organization].github.io\u003c/code\u003e and then associating your custom DNS name in the repository settings. The difference is that when you use the specially named \u003ccode\u003e[user/organization].github.io\u003c/code\u003e repository, it also serves as a potential parent to any of your other GitHub Pages that may be present in your other repositories.\u003c/p\u003e\n\u003ch3 id=\"so-which-should-i-use\"\u003eSo which should I use?\u003c/h3\u003e\n\u003cp\u003eIn summary, use Option 1 if you want a standalone site with a custom DNS name and nothing more.\u003c/p\u003e\n","date":"2023-10-02T10:57:00-05:00","permalink":"https://notes.beakstar.com/posts/where-are-my-github-pages/","summary":"This site runs on GitHub Pages, and while it\u0026rsquo;s a great feature, it was initially a bit confusing to understand where everything should be.\nThere are three main types of GitHub Pages:\nGitHub Pages for a GitHub user GitHub Pages for a GitHub organization GitHub Pages for a specific repo GitHub Pages for a GitHub User or Organization Consider this the primary \u0026ldquo;site\u0026rdquo; for an account. GitHub Pages for an account (or organization) is a general site not tied to a specific repository.","tags":["github","github pages"],"title":"Where Are My GitHub Pages?"},{"author":["Matthew Twomey"],"categories":null,"contents":"\u003cp\u003eI recently heard someone else share their perspective that one should not customize their tools. I also fell into this camp, until pretty recently.\u003c/p\u003e\n\u003ch2 id=\"the-lesson-of-vi\"\u003eThe lesson of vi\u003c/h2\u003e\n\u003cp\u003eI made what I believed was a wise choice back in the 90s when I was first getting comfortable in unix (AIX at the time). I decided to eschew other options and learn and stick with vi, at least for editing system configuration files. My reasoning was that vi was always present on any system I might connect to.\u003c/p\u003e\n\u003cp\u003eAs I grew in my career, this choice served me well. AIX, Solaris, BSD, Linux - any remote system I would connect to, vi was there.\u003c/p\u003e\n\u003cp\u003eI also broadened this concept into a more general sense of \u0026ldquo;using the standard\u0026rdquo; and along with that idea, I discarded any notion of ever customizing anything at all, ever. What if I needed to work on a system that didn\u0026rsquo;t have my customizations? What if I have to use a different computer? What if someone is trying to explain something to me and I\u0026rsquo;m not fully understanding because I\u0026rsquo;ve forgotten what \u0026ldquo;the defaults\u0026rdquo; are like? After two decades, I can now say that this was a mistake.\u003c/p\u003e\n\u003cp\u003eThere are benefits to this approach, but I now believe they are far outweighed by wasted productivity.\u003c/p\u003e\n\u003ch2 id=\"the-lesson-of-emacs\"\u003eThe lesson of EMACS\u003c/h2\u003e\n\u003cp\u003eA few years back I decided to learn Clojure and as a precursor, EMACS. I decided to use the Doom EMACS - which comes by default with vi key bindings. My left pinky became \u003cem\u003every\u003c/em\u003e sore. The difference now was that rather than editing a few configuration files here and there, I starting spending most of my day in EMACS. As heavy users of vi know, you need to hit \u003ccode\u003eescape\u003c/code\u003e \u003cem\u003ea lot\u003c/em\u003e. As EMACS users know, you need to use \u003ccode\u003eCTRL\u003c/code\u003e \u003cem\u003ea lot\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eThere is an ingenious solution to this which lies in the basically unused \u003ccode\u003eCAPS-LOCK\u003c/code\u003e key, just to the left of \u003ccode\u003eA\u003c/code\u003e on most keyboards. The solution is to use a key-mapping tool to get dual-function from that key:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTap the key (press and release it) and you get \u003ccode\u003eescape\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eHold the key down in combination with another key and you get \u003ccode\u003eCTRL-[key]\u003c/code\u003e (\u003ccode\u003eCTRL-G\u003c/code\u003e as an example)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo that practically useless key now serves as both a control key \u003cem\u003eand\u003c/em\u003e an escape key, plus it\u0026rsquo;s in a convenient location that puts zero stress on an average pinky!\u003c/p\u003e\n\u003cp\u003eWhat\u0026rsquo;s the problem then? The idea violated my entrenched commitment to never customizing \u003cem\u003eanything\u003c/em\u003e. WHAT IF I HAD TO USE A KEYBOARD WHERE CAPS-LOCK WASN\u0026rsquo;T MAPPED THIS WAY????\u003c/p\u003e\n\u003cp\u003eGiven the severity of the pain in my left pinky, after much soul-searching I decided to try this. I love it. What\u0026rsquo;s more, becoming comfortable with this customization ultimately led me to customize many other things that have been bothering me for years.\u003c/p\u003e\n\u003ch2 id=\"so-go-ahead-customize-your-tools\"\u003eSo go ahead, customize your tools\u003c/h2\u003e\n\u003cp\u003eAs it turns out, a little tweaking here and there to better match my tools to my tasks and workflow has been a big boon to my productivity and even my well-being. It\u0026rsquo;s been about three years now and I\u0026rsquo;ve had times where I\u0026rsquo;ve sat down at other peoples\u0026rsquo; computers, used tools that aren\u0026rsquo;t configured exactly the same as mine, and even used keyboards that haven\u0026rsquo;t remapped their \u003ccode\u003eCAPS-LOCK\u003c/code\u003e key (*​gasp​*). No one died and nothing blew up. I may have had a brief period of adjustment, but it was fine. In the end, the daily gains and joy I get from having tools that act exactly as I\u0026rsquo;d like them to has far outweighed the rare occasions where I need to use a different setup.\u003c/p\u003e\n\u003cp\u003eSo go for it, customize your tools - I wish I had long ago.\u003c/p\u003e\n","date":"2023-10-01T22:42:00-05:00","permalink":"https://notes.beakstar.com/posts/tailor-your-tools/","summary":"I recently heard someone else share their perspective that one should not customize their tools. I also fell into this camp, until pretty recently.\nThe lesson of vi I made what I believed was a wise choice back in the 90s when I was first getting comfortable in unix (AIX at the time). I decided to eschew other options and learn and stick with vi, at least for editing system configuration files.","tags":["vim","emacs","tooling"],"title":"Go head, tailor your tools"}]